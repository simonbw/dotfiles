#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
# vim:ts=2:sw=2:expandtab

import os
import xcffib as xcb
import random
import math
from xcffib.xproto import *
from PIL import Image
import pyscreenshot as ImageGrab

import tempfile

XCB_MAP_STATE_VIEWABLE = 2

PIXEL_SIZE = 24

def xcb_fetch_windows():
  """ Returns an array of rects of currently visible windows. """

  x = xcb.connect()
  root = x.get_setup().roots[0].root

  rects = []

  # iterate through top-level windows
  for child in x.core.QueryTree(root).reply().children:
    # make sure we only consider windows that are actually visible
    attributes = x.core.GetWindowAttributes(child).reply()
    if attributes.map_state != XCB_MAP_STATE_VIEWABLE:
      continue

    rects += [x.core.GetGeometry(child).reply()]

  return rects

def obscure_image(image):
  """ Obscures the given image. """
  size = image.size
  w = size[0] / PIXEL_SIZE or 1
  h = size[1] / PIXEL_SIZE or 1
  image = image.resize((w, h), Image.NEAREST)
  image = image.resize((size[0], size[1]), Image.NEAREST)

  return image

if __name__ == '__main__':
  image = ImageGrab.grab()

  for rect in xcb_fetch_windows():
    area = (
      rect.x, rect.y,
      rect.x + rect.width,
      rect.y + rect.height
    )
    if area[2] <= 0 or area[3] <= 0:
      continue

    cropped = image.crop(area)
    cropped = obscure_image(cropped)
    image.paste(cropped, area)

  f = '.simon-lock-image.png'
  image.save(f)
  os.system('i3lock -i ' + f) 
  os.remove(f)

